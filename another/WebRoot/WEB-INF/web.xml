<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	
 	<!-- 著名 Character Encoding filter -->
	<filter>  
       <filter-name>encodingFilter</filter-name>  
       <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>  
       <init-param>  
           <param-name>encoding</param-name>  
           <param-value>UTF-8</param-value>  
       </init-param>  
	   <!--forceEncoding为true时， 强制ServletResponse的编码格式和ServletRequest的编码格式一样。 -->
	   <init-param>  
           <param-name>forceEncoding</param-name>  
           <param-value>true</param-value>  
	   </init-param>
    </filter>  
    
    <filter-mapping>  
       <filter-name>encodingFilter</filter-name>  
       <url-pattern>/*</url-pattern>  
   </filter-mapping>
  
  

  
  	<!-- authority filter 最好加在Struts2的Filter前面-->  
 	<filter>  
	    <filter-name>SessionInvalidate</filter-name>  
	    <filter-class>com.fred.system.SessionCheckFilter</filter-class>  
	    <init-param>  
	     	 <param-name>checkSessionKey</param-name>  
	     	 <param-value>user</param-value>  
	    </init-param>  
	    <init-param>  
	      	<param-name>redirectURL</param-name>  
	     	<param-value>/login.jsp</param-value>  
	    </init-param>  
	    <init-param>  
	      	<param-name>notCheckURLList</param-name>  
	     	<param-value>/login.jsp,/easyui/loginAction.do</param-value>  
	    </init-param>  
 	 </filter>  
 
	<!--过滤.do结尾的action -->
	<filter-mapping>  
   		<filter-name>SessionInvalidate</filter-name>  
    	<url-pattern>*.do</url-pattern>  
 	</filter-mapping>   
  
	<!--url-pattern设定为/*时，会过滤根目录下所有东西，导致login.jsp加载图片失败  -->
	<!--	<filter-mapping>  
	    <filter-name>SessionInvalidate</filter-name>  
	    <url-pattern>/*</url-pattern>  
	 </filter-mapping>    -->
  
  
  	<!--StrutsPrepareAndExecuteFilter是自2.1.3开始就替代了FilterDispatcher，是Struts的核心过滤器-->
	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>
			org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter
		</filter-class>
	</filter>
	
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
  
  	<!-- 使用spring解决延迟加载问题，针对hibernate等用session的方式 -->
	<!-- 必须放在struts2的配置之前，因为Filter是从上向下过滤的 -->
 	<filter>  
	    <filter-name>OpenSessionInViewFilter</filter-name>  
	    <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>  
		<!--singleSession默认为true,若设为false则等于没用OpenSessionInView -->
	    <init-param>  
	        <param-name>singleSession</param-name>  
	        <param-value>true</param-value>  
	    </init-param>  
	</filter>  

	<filter-mapping>  
	    <filter-name>OpenSessionInViewFilter</filter-name>  
	    <url-pattern>/*</url-pattern>  
	</filter-mapping>  
	
	
 	<!-- 使用spring解决延迟加载问题，针对JPA用EntityManager的方式 -->
 	<!-- 必须放在struts2的配置之前，因为Filter是从上向下过滤的 -->
	<filter>  
        <filter-name>OpenEntityManagerInViewFilter</filter-name>  
        <filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>  
        <init-param>  
        <!-- 指定org.springframework.orm.jpa.LocalEntityManagerFactoryBean在spring配置文件中的名称,默认值为entityManagerFactory  
                                            如果LocalEntityManagerFactoryBean在spring中的名称不是entityManagerFactory,该参数一定要指定,否则会出现找不到entityManagerFactory的异常 -->  
            <param-name>entityManagerFactoryBeanName</param-name>  
            <param-value>entityManagerFactory</param-value>  
        </init-param>   
    </filter>  
    
    <filter-mapping>  
        <filter-name>OpenEntityManagerInViewFilter</filter-name>  
        <url-pattern>/*</url-pattern>  
    </filter-mapping>
	
	<!--Spring需要加载的xml文件，若没有配置，则加载默认的/WEB-INF/applicationContext.xml-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:applicationContext.xml,
			classpath:applicationPath.xml,
			classpath:jpaContext.xml
		</param-value> 
	</context-param>

  	<!--ContextLoaderListener监听器的作用是在启动Web容器时，自动装配ApplicationContext的配置信息 -->
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
  
	<!--log4j配置信息 -->
   	<context-param>  
        <param-name>log4jConfigLocation</param-name>   
        <param-value>classpath:log4j.properties</param-value>   
    </context-param>  
    <context-param>   
        <param-name>log4jRefreshInterval</param-name>   
        <param-value>60000</param-value>   
    </context-param>  
    
	<!--开启log4j日志记录功能，需要添加spring-web.jar包，否则用发生错误信息  -->
    <listener>   
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>   
    </listener>  
    
	<!--消息提醒监听器，web容器启动时开启 -->
    <listener>
    	<listener-class>
    		com.fred.common.timer.WarnTimer
    	</listener-class>
    </listener>
    
	<!-- welcome-file子元素用于指定默认文件的名称。welcome-file-list元素可以包含一个或多个welcome-file子元素。-->
	<!-- 如果在第一个welcome-file元素中没有找到指定的文件，Web容器就会尝试显示第二个，以此类推。-->
    <welcome-file-list>
	    <welcome-file>/login.jsp</welcome-file>
	</welcome-file-list>
  
</web-app>